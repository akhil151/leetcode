void merge(vector<int>& nums,int l,int mid,int r){
         vector<int> temp(r - l+ 1);
        int i = l, j = mid + 1, k = 0;
        while (i <= mid && j <= r) {
            if (nums[i] <= nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }
        while (i <= mid) {
            temp[k++] = nums[i++];
        }
        while (j <= r) {
            temp[k++] = nums[j++];
        }
        for (int p = 0; p < k; p++) {
            nums[l + p] = temp[p];
        }
        
    }

    void merge_sort(vector<int>& nums,int left,int right){

       
        if (left >= right) {
            return;
        }
        int mid = (left + right) / 2;
        merge_sort(nums, left, mid);
        merge_sort(nums, mid+1, right);
        merge(nums, left, mid, right);
       
    }
    vector<int> sortArray(vector<int>& nums) {
    
        int l=0;
        int r=n-1;
        merge_sort(nums,l,r);

        return nums;

    }
